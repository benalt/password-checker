---
interface Props {
  userEmail: string
}

import { passwordValidators } from "../lib/validators";

const { userEmail } = Astro.props;
---

<script>

import type { StringValidator } from "../lib/StringValidator";
import { passwordValidators } from "../lib/validators";
import type { ValidationResponse } from "../lib/validators";

function updateMarkup(validation?: ValidationResponse):void {

	if (!validation) {
		document.getElementById('passwordInput')?.classList.remove('pass', 'fail');
		document.querySelectorAll(`li[data-validator-id]`).forEach( 
			li => { li.classList.remove('pass', 'fail') } );
		(document.getElementById('passwordSubmit') as HTMLInputElement).disabled = true;
		return;
	}

	if (validation.setSuccess && validation.isValid) {
		// @ts-ignore 
		document.getElementById('title').innerText = "Thank you!";
		// @ts-ignore 
		document.getElementById('description').innerText = "Your password has been set."
		document.getElementById('userPasswordForm')?.classList.add('hidden')
		return;
	}
	
	(document.getElementById('passwordSubmit') as HTMLInputElement).disabled = !validation.isValid;
	
	const passInput = document.getElementById('passwordInput');
	passInput?.classList.toggle('pass', validation.isValid)
	passInput?.classList.toggle('fail', !validation.isValid)

	passwordValidators.forEach((vd)=>{
		const passes = validation.failingValidators.find( fail => fail.id === vd.id) === undefined;
		const li = document.querySelector(`li[data-validator-id="${vd.id}"]`);
		li?.classList.toggle('pass', passes);
		li?.classList.toggle('fail', !passes);
	});
}

function validateOnClient(password:string):ValidationResponse {
	let isValid = true
	let failingValidators:Array<StringValidator> = []
	passwordValidators.forEach((vd)=>{
		const passesValidation = vd.isValid(password)
		if (!passesValidation) { 
			failingValidators.push(vd);
			isValid = false; 
		} 
	});
	
	return {
		isValid,
		failingValidators: failingValidators
	};
}

async function validateOnServer(password:string):Promise<ValidationResponse> {
	const response = await fetch( '/validateSetEmail.json', { 
		headers: {
      "Content-Type": "application/json",
    },
		method: 'POST',
		body: JSON.stringify( { password, validateOnly: true } ) } );
	const responseData = await response.json() as ValidationResponse;
	return responseData;
}

async function submitForm(password:string):Promise<ValidationResponse> {
	const response = await fetch( '/validateSetEmail.json', { 
		headers: {
      "Content-Type": "application/json",
    },
		method: 'POST',
		body: JSON.stringify( { password, validateOnly: false } ) } );
	const responseData = await response.json() as ValidationResponse;
	return responseData;
}

async function handleFormUpdate(evt:Event):Promise<void> {
	const password = (evt.target as HTMLInputElement)?.value;
	if (password === '') { updateMarkup(); return; }

	const clientValidation = validateOnClient(password);
	updateMarkup(clientValidation);
	if (!clientValidation.isValid) { return; } // only bother the server if the client is happy

	const serverValidation = await validateOnServer(password);
	updateMarkup(serverValidation);
}

async function handleFormSubmit(evt:Event) {
	evt.preventDefault();
	const password = (document.getElementById('passwordInput') as HTMLInputElement).value;
	const submitResponse = await submitForm(password);
	updateMarkup(submitResponse)
} 

window.addEventListener('DOMContentLoaded',function () {
	updateMarkup();
  this.document.getElementById('passwordInput')?.addEventListener('input', handleFormUpdate)
	this.document.getElementById('userPasswordForm')?.addEventListener('submit', handleFormSubmit)
});

</script>
	<h1 id="title"> Welcome! { userEmail } </h1>
	<p id="description">It's time to set your password. </p>

	<form action="./validateSetEmail.json" method="post" id="userPasswordForm" class="userform">
		<label for="password">Password:</label>
		<input type="password" id="passwordInput" name="password" minlength="8" required />

		<p>Your password must meet these criteria: </p>
		<ul class="passwordParams">
			{passwordValidators.map((vd) => {
				return <li data-validator-id={vd.id} class="validationParam">{vd.label}</li>
			})}
		</ul>

		<input id="passwordSubmit" class="button" type="submit" value="Submit" />
	</form>
<style>
.userform {
	font-size: 1rem;
}

.userform.hidden {
	visibility: hidden;
}

.passwordParams .fail {
	color: var(--error-pink);
}

.passwordParams .pass {
	color: var(--dark-green);
}

h1{
	font-size: 1.2rem;
}

label {
	display: block;
	font-weight: 600;
} 

input {
	display: block;
	border: 2px solid var(--dark-green);
	border-radius: 4px;
	font-size: 1.2rem;
	padding: .2rem;
	outline: none
}


input.fail {
	border-color: var(--error-pink);
}

input.pass {
	border-color: var(--dark-green);
}

.passwordParams {
	padding: 0;
	list-style: none;
	font-size: .8rem;
}

.button {
	background-color: var(--dark-green);
	color: #fff;
	padding: .5rem;
	opacity: 0.9;
}

.button:enabled:hover {
	opacity: 1;
	cursor: pointer;
}


.button[disabled], .button:disabled {
	opacity: 0.5;
}
</style>
